
---
title: "PrÃ¡tica 07 - Teste Baseado em Propriedades"
author: "Breno Farias da Silva"
format: html
date: "2025-06-09"
---

## IntroduÃ§Ã£o

Este relatÃ³rio descreve a aplicaÃ§Ã£o da tÃ©cnica de **teste baseado em propriedades (Property-Based Testing)** para verificar a implementaÃ§Ã£o de uma funÃ§Ã£o que valida identificadores na linguagem *Silly Pascal*. A atividade faz parte da disciplina **PPGCC12 - Teste de Software**.

A funÃ§Ã£o `validateIdentifier(String s)` possui o objetivo de determinar se um identificador Ã© vÃ¡lido segundo as seguintes regras:

- Deve comeÃ§ar com uma letra (maiÃºscula ou minÃºscula).
- Pode conter apenas letras e dÃ­gitos apÃ³s o primeiro caractere.
- O comprimento deve ser de **1 a 6 caracteres**, inclusive.

## AnÃ¡lise da SoluÃ§Ã£o Implementada

A anÃ¡lise do cÃ³digo fornecido revela alguns problemas. O trecho abaixo mostra a implementaÃ§Ã£o:

```java
public boolean validateIdentifier(String s) {
  char achar;
  boolean valid_id = false;
  achar = s.charAt(0);
  valid_id = ((achar >= 'A') && (achar <= 'Z')) || ((achar >= 'a') && (achar <= 'z'));

  if (s.length() > 1) {
      achar = s.charAt(1);
      int i = 1;
      while (i < s.length() - 1) {
          achar = s.charAt(i);
          if (((achar >= 'A') && (achar <= 'Z')) || ((achar >= 'a') && (achar <= 'z')) || ((achar >= '0') && (achar <= '9'))) {
              valid_id = false;
          }
          i++;
      }
  }
  if (valid_id && (s.length() >= 1) && (s.length() < 6))
      return true;
  else
      return false;
}
```

### **ObservaÃ§Ãµes sobre o cÃ³digo**
- HÃ¡ um erro lÃ³gico no laÃ§o `while`: a condiÃ§Ã£o invalida o identificador sempre que um caractere vÃ¡lido (letra ou dÃ­gito) Ã© encontrado. Isso Ã© oposto ao esperado.
- O limite de tamanho estÃ¡ incorreto, pois o cÃ³digo verifica `s.length() < 6`, quando deveria ser `<= 6`.
- NÃ£o hÃ¡ tratamento para strings vazias, o que pode gerar exceÃ§Ã£o (`StringIndexOutOfBoundsException`).

## DefiniÃ§Ã£o das Propriedades

Baseado na especificaÃ§Ã£o, definimos as seguintes propriedades para a funÃ§Ã£o:

### **Propriedades de entrada vÃ¡lida**
- Para qualquer string que:
  - Tenha de 1 a 6 caracteres;
  - O primeiro caractere seja uma letra (`[a-zA-Z]`);
  - Os demais caracteres (se existirem) sejam letras ou dÃ­gitos (`[a-zA-Z0-9]`);
  
A funÃ§Ã£o **deve retornar `true`**.

### **Propriedades de entrada invÃ¡lida**
- A funÃ§Ã£o deve retornar **`false`** se:
  - O primeiro caractere nÃ£o for uma letra;
  - O comprimento for menor que 1 ou maior que 6;
  - Contiver qualquer caractere que nÃ£o seja letra ou dÃ­gito.

## ImplementaÃ§Ã£o dos Testes Baseados em Propriedades

A implementaÃ§Ã£o dos testes foi realizada utilizando o framework **jqwik** para Java. Foram criados trÃªs conjuntos de propriedades:

### **Testa identificadores vÃ¡lidos**

```java
@Property
void validIdentifiers(@ForAll @AlphaChars @StringLength(min = 0, max = 5) String suffix) {
    String id = "A" + suffix;
    assumeTrue(id.length() <= 6);
    assertThat(identifier.validateIdentifier(id)).isTrue();
}
```

### **Testa identificadores invÃ¡lidos por tamanho**

```java
@Property
void invalidLengthIdentifiers(@ForAll @StringLength(min = 7, max = 20) String id) {
    assertThat(identifier.validateIdentifier(id)).isFalse();
}
```

### **Testa identificadores invÃ¡lidos por caracteres**

```java
@Property
void invalidCharacterIdentifiers(@ForAll @StringLength(min = 0, max = 5) String suffix) {
    String id = "1" + suffix;
    assumeTrue(id.length() <= 6);
    assertThat(identifier.validateIdentifier(id)).isFalse();
}
```

## Resultados dos Testes

| Propriedade                          | Status           | Casos Gerados |
|---------------------------------------|------------------|----------------|
| Identificadores vÃ¡lidos               | Falha            | 1 (primeiro caso) |
| Identificadores invÃ¡lidos por tamanho | Passou           | 1000           |
| Identificadores invÃ¡lidos por caract. | Passou           | 1000           |

### **Detalhes da falha**
- A propriedade **"Identificadores vÃ¡lidos"** falhou logo na primeira execuÃ§Ã£o.
- Casos que falharam: `"AA"` e `"YxU"`.
- Erro: A funÃ§Ã£o retornou `false` para identificadores vÃ¡lidos.

## ConclusÃ£o

O teste baseado em propriedades se mostrou eficiente na identificaÃ§Ã£o de problemas na implementaÃ§Ã£o. A falha detectada reforÃ§a que a funÃ§Ã£o nÃ£o atende corretamente Ã  especificaÃ§Ã£o quando se trata de validar identificadores vÃ¡lidos.

A tÃ©cnica nÃ£o sÃ³ verifica casos simples, mas tambÃ©m explora automaticamente cenÃ¡rios de borda e aleatÃ³rios, proporcionando uma cobertura ampla e eficaz.

### ðŸ”§ **RecomendaÃ§Ã£o**
A implementaÃ§Ã£o fornecida apresenta erros lÃ³gicos. Recomenda-se a sua correÃ§Ã£o conforme a especificaÃ§Ã£o. Segue uma versÃ£o correta da funÃ§Ã£o:

```java
public boolean validateIdentifier(String s) {
    if (s == null || s.length() < 1 || s.length() > 6)
        return false;

    if (!Character.isLetter(s.charAt(0)))
        return false;

    for (int i = 1; i < s.length(); i++) {
        char c = s.charAt(i);
        if (!Character.isLetterOrDigit(c))
            return false;
    }

    return true;
}
```

## ReferÃªncias

- Livro: *Effective Software Testing* â€” MaurÃ­cio Aniche, 2022.
- DocumentaÃ§Ã£o jqwik: https://jqwik.net/docs/current/user-guide.html
